statement ok
CREATE TABLE documents (
    id SERIAL PRIMARY KEY,
    title TEXT,
    body TEXT
);

statement ok
INSERT INTO documents (title, body) VALUES 
('Document 1', 'PostgreSQL is an advanced open-source relational database.'),
('Document 2', 'This document covers advanced topics in PostgreSQL full-text search.'),
('Document 3', 'Text search in PostgreSQL is based on bm25 ranking.'),
('Document 4', 'PostgreSQL supports various types of indexes, including B-tree, hash, and GIN.'),
('Document 5', 'One of the key features of PostgreSQL is its support for advanced indexing techniques.'),
('Document 6', 'PostgreSQL offers JSON and JSONB data types for handling semi-structured data.'),
('Document 7', 'In PostgreSQL, window functions allow computations across a set of table rows.'),
('Document 8', 'PostgreSQL’s MVCC model ensures high concurrency and data consistency.'),
('Document 9', 'This document covers foreign key constraints in PostgreSQL.'),
('Document 10', 'PostgreSQL provides a robust system for managing transactions and rollbacks.'),
('Document 11', 'Triggers in PostgreSQL allow automatic execution of procedures in response to events.'),
('Document 12', 'PostgreSQL supports recursive queries using the WITH RECURSIVE clause.'),
('Document 13', 'PostgreSQL has extensive support for geospatial data with the PostGIS extension.'),
('Document 14', 'Full-text search in PostgreSQL enables querying of large text documents efficiently.'),
('Document 15', 'Partitioning tables in PostgreSQL can help in managing large datasets effectively.'),
('Document 16', 'The EXPLAIN command in PostgreSQL is used to analyze query execution plans.'),
('Document 17', 'PostgreSQL’s role-based access control allows fine-grained security management.'),
('Document 18', 'In PostgreSQL, vacuuming helps in recovering storage and improving performance.'),
('Document 19', 'PostgreSQL supports asynchronous replication for high availability.'),
('Document 20', 'You can implement custom functions in PostgreSQL using PL/pgSQL.'),
('Document 21', 'PostgreSQL supports arrays, allowing storage of multiple values in a single column.'),
('Document 22', 'This document explains PostgreSQL’s approach to data partitioning.'),
('Document 23', 'PostgreSQL has built-in support for UUID data type for globally unique identifiers.'),
('Document 24', 'PostgreSQL’s type system supports composite types for creating complex data structures.'),
('Document 25', 'PostgreSQL offers advanced query optimization techniques to improve performance.'),
('Document 26', 'In PostgreSQL, table inheritance allows tables to share a common structure.'),
('Document 27', 'PostgreSQL can be extended with custom types, operators, and functions.'),
('Document 28', 'The CHECK constraint in PostgreSQL enforces domain integrity at the column level.'),
('Document 29', 'PostgreSQL supports foreign data wrappers (FDW) for connecting to external databases.'),
('Document 30', 'This document explains how PostgreSQL implements multi-column indexes.'),
('Document 31', 'PostgreSQL supports different isolation levels for transaction management.'),
('Document 32', 'The RETURNING clause in PostgreSQL allows retrieving values from inserted rows.'),
('Document 33', 'PostgreSQL allows creating materialized views to cache query results.'),
('Document 34', 'You can use the DISTINCT clause in PostgreSQL to eliminate duplicate rows in a query.'),
('Document 35', 'This document covers the basics of using views in PostgreSQL.'),
('Document 36', 'PostgreSQL allows setting default values for columns using the DEFAULT constraint.'),
('Document 37', 'PostgreSQL’s GIN index is ideal for indexing array, JSON, and full-text data.'),
('Document 38', 'You can define custom domains in PostgreSQL to create reusable constraints.'),
('Document 39', 'PostgreSQL’s hstore data type is useful for storing key-value pairs.'),
('Document 40', 'PostgreSQL supports table partitioning by range, list, or hash.'),
('Document 41', 'This document covers how to use sequences for auto-incrementing values in PostgreSQL.'),
('Document 42', 'PostgreSQL’s CTEs (Common Table Expressions) can help in organizing complex queries.'),
('Document 43', 'The SERIAL pseudo-type in PostgreSQL allows automatic generation of unique IDs.'),
('Document 44', 'PostgreSQL’s advisory locks are useful for application-level concurrency control.'),
('Document 45', 'You can use row-level security (RLS) in PostgreSQL to restrict access to table rows.'),
('Document 46', 'PostgreSQL provides a rich set of functions for manipulating date and time values.'),
('Document 47', 'This document explains how PostgreSQL handles null values in queries.'),
('Document 48', 'In PostgreSQL, enums allow defining a data type with a static set of values.'),
('Document 49', 'PostgreSQL allows creating temporary tables that exist only during a session.'),
('Document 50', 'You can use the ALTER TABLE statement in PostgreSQL to modify existing table structures.'),
('Document 51', 'PostgreSQL provides extensive support for regular expressions in queries.'),
('Document 52', 'This document explains how to use the CASE expression in PostgreSQL for conditional queries.'),
('Document 53', 'PostgreSQL has native support for storing IP addresses with the INET data type.'),
('Document 54', 'PostgreSQL’s pg_stat_activity view provides insight into active database connections.'),
('Document 55', 'In PostgreSQL, the COALESCE function returns the first non-null value in a list.'),
('Document 56', 'PostgreSQL’s event triggers allow triggering events on database-level operations.'),
('Document 57', 'PostgreSQL supports the JSONB data type for efficient storage of JSON data.'),
('Document 58', 'PostgreSQL allows using user-defined operators for custom operations on data types.'),
('Document 59', 'The REINDEX command in PostgreSQL is used to rebuild indexes.'),
('Document 60', 'PostgreSQL supports UPSERT using the ON CONFLICT clause to handle duplicate key violations.'),
('Document 61', 'PostgreSQL’s EXPLAIN ANALYZE provides execution times for query planning and execution.'),
('Document 62', 'In PostgreSQL, domains allow adding constraints to a data type for enforcing business rules.'),
('Document 63', 'PostgreSQL’s hash index provides efficient indexing for equality comparisons.'),
('Document 64', 'This document covers parallel query execution in PostgreSQL for better performance.'),
('Document 65', 'PostgreSQL supports the COLLATE clause for sorting text data based on a locale.'),
('Document 66', 'PostgreSQL allows defining foreign keys to enforce referential integrity across tables.'),
('Document 67', 'You can use the FETCH command in PostgreSQL to retrieve a specific number of rows from a query.'),
('Document 68', 'PostgreSQL’s pg_dump utility allows backing up and restoring databases efficiently.'),
('Document 69', 'In PostgreSQL, sequence generators are used to create unique values for table columns.'),
('Document 70', 'PostgreSQL’s vacuum process helps to recover storage and optimize query performance.'),
('Document 71', 'PostgreSQL’s GIST index supports a wide range of query types, including geometric and full-text queries.'),
('Document 72', 'PostgreSQL supports LATERAL joins, which allow referencing subqueries in the FROM clause.'),
('Document 73', 'PostgreSQL’s INTERVAL data type is used for representing durations of time.'),
('Document 74', 'In PostgreSQL, the ARRAY_AGG function aggregates values into an array.'),
('Document 75', 'This document explains how to use triggers for auditing data changes in PostgreSQL.'),
('Document 76', 'PostgreSQL supports table constraints such as PRIMARY KEY, UNIQUE, and CHECK.'),
('Document 77', 'PostgreSQL allows querying JSON data using JSON path expressions.'),
('Document 78', 'PostgreSQL’s role system provides fine-grained access control for users and groups.'),
('Document 79', 'In PostgreSQL, CTEs (Common Table Expressions) allow organizing complex queries in a readable way.'),
('Document 80', 'PostgreSQL’s schema system allows organizing database objects logically.'),
('Document 81', 'PostgreSQL supports multi-master replication with third-party extensions like BDR.'),
('Document 82', 'PostgreSQL’s BRIN indexes are useful for indexing large tables with naturally ordered data.'),
('Document 83', 'PostgreSQL’s TO_TSVECTOR function prepares text for full-text search indexing.'),
('Document 84', 'PostgreSQL allows creating indexes on expressions for more flexible query optimization.'),
('Document 85', 'PostgreSQL’s IS DISTINCT FROM operator helps in comparing nullable columns.'),
('Document 86', 'PostgreSQL’s ALTER SEQUENCE command is used to modify properties of a sequence generator.'),
('Document 87', 'PostgreSQL’s TRUNCATE command is used to quickly delete all rows from a table.'),
('Document 88', 'PostgreSQL provides the COPY command to efficiently load data into tables from a file.'),
('Document 89', 'PostgreSQL’s row-level security (RLS) helps in implementing data-level access controls.'),
('Document 90', 'PostgreSQL’s range data types allow defining continuous ranges of values, such as dates or numbers.'),
('Document 91', 'PostgreSQL’s LISTEN and NOTIFY commands provide an asynchronous messaging system.'),
('Document 92', 'In PostgreSQL, the NULLIF function returns NULL if two expressions are equal.'),
('Document 93', 'PostgreSQL’s pg_stat_statements extension provides insights into query performance.'),
('Document 94', 'PostgreSQL supports the LIKE operator for pattern matching in text data.'),
('Document 95', 'PostgreSQL’s pg_trgm extension provides trigram matching for similarity search.'),
('Document 96', 'PostgreSQL’s pg_stat_activity view provides information about active database connections.'),
('Document 97', 'PostgreSQL allows creating custom aggregates for specialized data processing.'),
('Document 98', 'PostgreSQL’s pg_stat_user_indexes view provides statistics on index usage.'),
('Document 99', 'PostgreSQL supports the ANY and ALL operators for comparing values in subqueries.'),
('Document 100', 'PostgreSQL’s pg_stat_bgwriter view provides statistics on the background writer process.');


statement ok
CREATE INDEX documents_body_bm25 ON documents USING bm25 (body bm25_ops);

statement ok
SELECT id, title, body <&> to_bm25query('documents_body_bm25', 'PostgreSQL') AS rank
FROM documents
ORDER BY rank
LIMIT 10;

statement ok
DROP TABLE documents;


